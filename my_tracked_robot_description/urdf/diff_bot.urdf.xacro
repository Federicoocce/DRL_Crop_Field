<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="tracked_robot">

    <!-- Robot Properties -->
    <xacro:property name="chassis_length" value="0.3"/>
    <xacro:property name="chassis_width" value="0.3"/>
    <xacro:property name="chassis_height" value="0.1"/>
    <xacro:property name="chassis_mass" value="5.0"/>

    <xacro:property name="wheel_separation" value="0.3"/> 
    <xacro:property name="wheel_radius" value="0.1"/>
    <xacro:property name="wheel_width" value="0.1"/>
    <xacro:property name="wheel_mass" value="0.5"/>
    <xacro:property name="wheel_x_spacing" value="0.25"/>
    <xacro:property name="PI" value="3.1415926535897931"/>

    <!-- Inertial Macros -->
    <xacro:macro name="inertial_box" params="mass x y z">
        <inertial>
            <mass value="${mass}"/>
            <inertia ixx="${(1/12) * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
                     iyy="${(1/12) * mass * (x*x + z*z)}" iyz="0.0"
                     izz="${(1/12) * mass * (x*x + y*y)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_cylinder_y" params="mass radius length">
      <inertial>
        <mass value="${mass}"/>
        <inertia ixx="${(1/12)*mass*(3*radius*radius + length*length)}" ixy="0.0" ixz="0.0"
                 iyy="${(1/2)*mass*radius*radius}" iyz="0.0"
                 izz="${(1/12)*mass*(3*radius*radius + length*length)}"/>
      </inertial>
    </xacro:macro>

    <!-- Robot Links and Joints -->
    <link name="base_footprint"/>

    <link name="base_link">
        <visual>
            <geometry><box size="${chassis_length} ${chassis_width} ${chassis_height}"/></geometry>
            <material name="chassis_purple"><color rgba="0.5 0.0 0.5 1.0"/></material>
        </visual>
        <collision name="base_link_collision">
            <geometry><box size="${chassis_length} ${chassis_width} ${chassis_height}"/></geometry>
        </collision>
        <xacro:inertial_box mass="${chassis_mass}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}"/>
    </link>
    <gazebo reference="base_link">
        <material>Gazebo/Purple</material>
    </gazebo>

    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${chassis_height/2 + wheel_radius}" rpy="0 0 0"/>
    </joint>

    <xacro:macro name="wheel" params="prefix side side_y_reflect x_offset">
        <link name="${prefix}_${side}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
                <geometry><cylinder radius="${wheel_radius}" length="${wheel_width}"/></geometry>
                <material name="wheel_grey"><color rgba="0.2 0.2 0.2 1"/></material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
                <geometry><cylinder radius="${wheel_radius}" length="${wheel_width}"/></geometry>
            </collision>
            <xacro:inertial_cylinder_y mass="${wheel_mass}" radius="${wheel_radius}" length="${wheel_width}"/>
        </link>
        
        <joint name="${prefix}_${side}_wheel_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_${side}_wheel_link"/>
            <origin xyz="${x_offset} ${side_y_reflect * wheel_separation/2} -${chassis_height/2}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>

        <gazebo reference="${prefix}_${side}_wheel_link">
            <material>Gazebo/DarkGrey</material>
            <xacro:if value="${prefix == 'rear'}">
                <mu1>100.0</mu1> 
                <mu2>1.0</mu2>
            </xacro:if>
            <xacro:if value="${prefix == 'front'}">
                <mu1>100.0</mu1> 
                <mu2>1.0</mu2>
            </xacro:if>
        </gazebo>
    </xacro:macro>

    <xacro:wheel prefix="front" side="left"  side_y_reflect="1"  x_offset="${wheel_x_spacing/2}"/>
    <xacro:wheel prefix="rear"  side="left"  side_y_reflect="1"  x_offset="-${wheel_x_spacing/2}"/>
    <xacro:wheel prefix="front" side="right" side_y_reflect="-1" x_offset="${wheel_x_spacing/2}"/>
    <xacro:wheel prefix="rear"  side="right" side_y_reflect="-1" x_offset="-${wheel_x_spacing/2}"/>

    <!-- Lidar Sensor -->
    <link name="laser_link">
        <visual><geometry><cylinder radius="0.03" length="0.05"/></geometry></visual>
        <collision><geometry><cylinder radius="0.03" length="0.05"/></geometry></collision>
        <xacro:inertial_box mass="0.1" x="0.06" y="0.06" z="0.05"/>
    </link>

    <joint name="laser_joint" type="fixed">
        <parent link="base_link"/>
        <child link="laser_link"/>
        <origin xyz="${chassis_length/2 - 0.025} 0 ${chassis_height/2 + 0.05}" rpy="0 0 0"/>
    </joint>

<!-- Gazebo Plugins -->
    <gazebo>
        <!-- Plugin for the REAR wheels -->
        <plugin name="diff_drive_rear" filename="libgazebo_ros_diff_drive.so">
            <ros>
                <remapping>cmd_vel:=/cmd_vel</remapping>
                <remapping>odom:=/odom</remapping> <!-- This plugin will publish odometry -->
            </ros>

            <!-- Rear wheels -->
            <left_joint>rear_left_wheel_joint</left_joint>
            <right_joint>rear_right_wheel_joint</right_joint>

            <wheel_separation>${wheel_separation}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>
            <max_wheel_torque>200</max_wheel_torque>
            <max_wheel_acceleration>5.0</max_wheel_acceleration>

            <!-- Odometry configuration -->
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
        </plugin>

        <!-- Plugin for the FRONT wheels -->
        <plugin name="diff_drive_front" filename="libgazebo_ros_diff_drive.so">
            <ros>
                <remapping>cmd_vel:=/cmd_vel</remapping>
            </ros>

            <!-- Front wheels -->
            <left_joint>front_left_wheel_joint</left_joint>
            <right_joint>front_right_wheel_joint</right_joint>

            <wheel_separation>${wheel_separation}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>
            <max_wheel_torque>200</max_wheel_torque>
            <max_wheel_acceleration>5.0</max_wheel_acceleration>

            <!-- Disable odometry from this plugin to avoid conflicts -->
            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
        </plugin>
    </gazebo>

    <gazebo reference="laser_link">
        <material>Gazebo/Red</material>
        <sensor name="laser" type="ray">
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <min_angle>-${PI}</min_angle>
                        <max_angle>${PI}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.14</min>
                    <max>2.0</max>
                </range>
            </ray>
            <plugin name="laser_controller" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <namespace>/laser_controller</namespace>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>laser_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>
</robot>